version: "3"
services:
  nginx:
    container_name: "pa-nginx"
    depends_on:
      - backend
      - database
    restart: always
    build:
      dockerfile: "Dockerfile"
      context: "./nginx"
    ports:
      - "3050:80"
  database:
    container_name: "pa-db"
    image: "postgres:15"
    ports:
      - "${POSTGRES_PORT}:${POSTGRES_PORT}"
    environment:
      POSTGRES_USER: "${POSTGRES_USER}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
      POSTGRES_DB: "${POSTGRES_DB_NAME}"
      POSTGRES_HOST: host.docker.internal
      POSTGRES_PORT: "${POSTGRES_PORT}"
      NODE_ENV: "production"
    volumes:
      - database:/var/lib/postgresql/data
    env_file: ./.env
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 2s
      timeout: 2s
      retries: 2

  backend:
    container_name: "pa-be"
    depends_on:
      database:
        condition: service_healthy
    build: "./backend"
    image: node:latest
    restart: unless-stopped
    ports:
      - "3010:3010"
    command: "npm start"
    environment:
      POSTGRES_USER: "${POSTGRES_USER}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
      POSTGRES_DB_NAME: "${POSTGRES_DB_NAME}"
      POSTGRES_HOST: host.docker.internal
      POSTGRES_PORT: "${POSTGRES_PORT}"
      PORT: "${PORT}"
      NODE_ENV: "production"
    env_file: ./.env

  frontend:
    container_name: pa-fe
    depends_on:
      - backend
    build:
      context: "./frontend"
    ports:
      - "3000:3000"
    stdin_open: true
    volumes:
      - ./frontend:/usr/src/app/frontend
      - /usr/src/app/frontend/node_modules

volumes:
  database:
